// 
// Generated
// 
package PACKAGE.NAME.WILL.BE.HERE;

import java.util.*;
import com.fasterxml.jackson.annotation.*;
public class DecryptedItem {
	// Item creation timestamp.
	private String: createdAt;
	// Item Details.
	private DecryptedItemDetails: details;
	// The key this item was encrypted with.
	private String: encryptedBy;
	// Item favorite index (is the item favorited).
	private long: faveIndex;
	// Item version number.
	private long: itemVersion;
	// Naked domains for the item. Only used by clients that can fill.
// 	nakedDomains?: String[];
	// Item Overview.
	private DecryptedItemOverview: overview;
	// Where should this item appear in extension interfaces.
	private String: scope;
	// Item template UUID.
	private String: templateUuid;
	// Is the item trashed. 'Y' = true.
	private String: trashed;
	// Item updated timestamp.
	private String: updatedAt;
	// Item UUID.
	private String: uuid;
}

// Item Details.
public class DecryptedItemDetails {
	// Web form details.
// 	fields?: DecryptedItemDetailsField[];
	private HtmlForm: htmlForm;
	// Notes for the item.
	private String: notesPlain;
	// Item password.
	private String: password;
// 	passwordHistory?: PasswordHistory[];
	// Item sections.
// 	sections?: DecryptedItemDetailsSection[];
}

public class DecryptedItemDetailsField {
	// The field's designation.
	private Designation: designation;
	// The field's id, or the empty string.
	private String: id;
	// The field's name, or the empty string.
	private String: name;
	// A short representation of the HTML field type.
	private Type: type;
	// The field's value, or the empty string.
	private String: value;
}

public class HtmlForm {
	// Form action.
	private String: htmlAction;
	// Form element ID.
	private String: htmlID;
	// Form method.
	private String: htmlMethod;
	// Form name.
	private String: htmlName;
}

public class PasswordHistory {
	// The point in time this password was changed.
	private double: time;
	// The Password at this point in history.
	private String: value;
}

// Item sections.
public class DecryptedItemDetailsSection {
// 	fields?: DecryptedItemDetailsSectionField[];
	// Section name.
	private String: name;
	// Section title.
	private String: title;
}

public class DecryptedItemDetailsSectionField {
	// Attributes for this section field.
	private SectionFieldAttributes: a;
	// Type of field.
	private String: k;
	// Identifier for the field. Uniqueness not guaranteed. Also used for sub-typing.
	private String: n;
	// Title or label.
	private String: t;
	// Value for this section field.
	private SectionFieldValueUnion: v;
}

// Attributes for this section field.
public class SectionFieldAttributes {
	// A set of valid characters to be filtered before being copied to clipboard.
	private String: clipboardFilter;
	// A password generator should not be available for this field.
	private String: generate;
	// Users can not edit or delete guarded fields or sections that contain guarded fields.
	private String: guarded;
	private InputTraits: inputTraits;
	// Interface should provide a multiline editor for this field.
	private String: multiline;
}

public class InputTraits {
	// Type of autocapitalization that should be used for this field.
	private Autocapitalization: autocapitalization;
	// Should software autocorrection be available for this field.
	private Autocorrection: autocorrection;
	// Type of software keyboard.
	private Keyboard: keyboard;
}

// Item Overview.
public class DecryptedItemOverview {
	// Additional info.
	private String: ainfo;
// 	appIds?: AppId[];
	// Determines whether browser extensions should automatically submit the login after filling.
	private String: autosubmit;
	// B5 user that this item is associated with.
	private String: b5UserUUID;
	private Icons: icons;
	// Password bits of entropy.
	private long: pbe;
	// Password generated by random number generator.
	private boolean: pgrng;
	// Password Stregth indicator
	private long: ps;
	// Where should this item show up in extension interfaces.
	private Scope: scope;
	// Tags on this item.
// 	tags?: String[];
	// Item title
	private String: title;
	// Primary URL for this item.
	private String: url;
	// Secondary URLs for this item.
// 	URLs?: Url[];
}

public class AppId {
	// App identifier.
	private String: id;
	// App name.
	private String: name;
	// Identification type.
	private String: type;
}

public class Icons {
	private Details: details;
}

public class Details {
	// Encryption Key in JSON Web Key format.
	private Jwk: encryptionKey;
	// Icon file ID.
	private String: fileID;
	// Nonce for icon.
	private String: nonce;
	// Signing Key in JSON Web Key format.
	private Jwk: signingKey;
}

// Encryption Key in JSON Web Key format.
// Signing Key in JSON Web Key format.
public class Jwk {
	// Encryption algorithm.
	private String: alg;
	// Eliptic Curve Public Key: curve.
	private String: crv;
	// Eliptic Curve Private Key: ECC private key. RSA Private Key: private exponent.
	private String: d;
	// RSA Private Key: first factor CRT exponent.
	private String: dp;
	// RSA Private Key: second factor CRT exponent.
	private String: dq;
	// RSA Public Key: exponent.
	private String: e;
	// Is the key external.
	private JwkExternal: ext;
	// Symmetric Key.
	private String: k;
	// Operations for this key.
// 	key_ops: KeyOp[];
	// Key ID.
	private String: kid;
	// Key type.
	private String: kty;
	// RSA Public Key: modulus.
	private String: n;
	// RSA Private Key: other primes info.
	private String: oth;
	// RSA Private Key: first prime factor.
	private String: p;
	// RSA Private Key: second prime factor.
	private String: q;
	// RSA Private Key: first CRT coefficient.
	private String: qi;
	// Eliptic Curve Public Key: x coordiate.
	private String: x;
	// Eliptic Curve Public Key: y coordiate.
	private String: y;
}

public class Url {
	// URL label.
	private String: l;
	// URL.
	private String: u;
}

// Value for this section field.
// Field value. Can be any type.
// Is the key external.
// Is this key external.
// Value for this section field.
// Field value. Can be any type.
// The field's designation.
// export enum Designation {
// 	Password = "password",
// 	Username = "username",
// }

// A short representation of the HTML field type.
// export enum Type {
// 	A = "A",
// 	B = "B",
// 	C = "C",
// 	E = "E",
// 	I = "I",
// 	N = "N",
// 	P = "P",
// 	R = "R",
// 	Rng = "RNG",
// 	S = "S",
// 	T = "T",
// 	Tel = "TEL",
// 	U = "U",
// }

// Type of autocapitalization that should be used for this field.
// export enum Autocapitalization {
// 	AllCharacters = "AllCharacters",
// 	None = "none",
// 	Sentences = "Sentences",
// 	Words = "Words",
// }

// Should software autocorrection be available for this field.
// export enum Autocorrection {
// 	No = "no",
// 	Yes = "yes",
// }

// Type of software keyboard.
// export enum Keyboard {
// 	Default = "Default",
// 	EmailAddress = "EmailAddress",
// 	NamePhonePad = "NamePhonePad",
// 	NumberPad = "NumberPad",
// 	NumbersAndPunctuation = "NumbersAndPunctuation",
// 	Url = "URL",
// }

// export enum KeyOp {
// 	Decrypt = "decrypt",
// 	DeriveBits = "deriveBits",
// 	DeriveKey = "deriveKey",
// 	Encrypt = "encrypt",
// 	Sign = "sign",
// 	UnwrapKey = "unwrapKey",
// 	Verify = "verify",
// 	WrapKey = "wrapKey",
// }

// Where should this item show up in extension interfaces.
// export enum Scope {
// 	Always = "Always",
// 	BasicAuth = "BasicAuth",
// 	Never = "Never",
// 	Regular = "Regular",
// }

